# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'TFbuligar.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import kwargs as kwargs
import matplotlib.pyplot as plt
import numpy as np
import os
import PIL
import tensorflow as tf
from efficientnet import model
from keras import optimizers
from keras.layers import Flatten, Dense, Dropout
import matplotlib.pyplot as plt
import np as np
import numpy as np

from skimage.feature import greycomatrix, greycoprops
from skimage import io
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.models import Sequential

import pathlib

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox #для создания всплывающих окон

# from TF_Flower import class_names, score


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(300, 300)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.Classificate = QtWidgets.QPushButton(self.centralwidget)
        self.Classificate.setGeometry(QtCore.QRect(10, 10, 131, 28))
        font = QtGui.QFont()
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.Classificate.setFont(font)
        self.Classificate.setStyleSheet("")
        self.Classificate.setObjectName("Classificate")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(30, 120, 55, 16))
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 300, 26))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.openfile = QtWidgets.QAction(MainWindow)
        self.openfile.setObjectName("openfile")
        self.savefile = QtWidgets.QAction(MainWindow)
        self.savefile.setObjectName("savefile")
        self.menu.addAction(self.openfile)
        self.menu.addAction(self.savefile)
        self.menubar.addAction(self.menu.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Classificate.setText(_translate("MainWindow", "1"))
        self.label.setText(_translate("MainWindow", "Ответ"))
        self.menu.setTitle(_translate("MainWindow", "Файл"))
        self.openfile.setText(_translate("MainWindow", "Открыть"))
        self.savefile.setText(_translate("MainWindow", "Сохранить"))


    def results(self):
        if not self.is_equal:
            res = eval(self.screen.text())
            self.screen.setText("Результат:" + str(res))
            self.is_equal = True
        else:
            error = QMessageBox() # окно
            #настройки окна
            error.setWindowTitle("Ошибка")
            error.setText("Сейчас это действие выполнить нельзя")
            error.setIcon(QMessageBox.Warning)
            error.setStandardButtons(QMessageBox.Reset|QMessageBox.Cancel|QMessageBox.Ok) #кнопки

            error.setDefaultButton(QMessageBox.Ok) # подстветка окна
            error.setInformativeText("Два раза действие не выполнить")
            error.setDetailedText("Детали")
            error.buttonClicked.connect(self.popup_action)
            error.exec_() # показывать окно
    def add_functions(self):
        self.Classificate.clicked.connect()

    def load_images(self):
        image = io.imread('Scratch0.jpg')  # Загрузка изображения
        D = 10  # Расстояние смежности
        Angles = 0
        Distances = np.arange(1, D + 1, 1)
        Angles = [Angles]  # Угол
        glcm = greycomatrix(image, distances=Distances,
                            angles=Angles,  # np.pi/4,np.pi/2,3*np.pi/4,np.pi,5*np.pi/4,3*np.pi/2,7*np.pi/4],
                            levels=256,
                            symmetric=True, normed=True)  # Построение МПС

        self.Contrast = greycoprops(glcm, 'contrast')  # Текстурный признак Контраст
        self.Dissimilarity = greycoprops(glcm, 'dissimilarity')  # Текстурный признак несходство
        self.Homogeneity = greycoprops(glcm, 'homogeneity')  # Текстурный признак Локальная однородность
        self.Asm = greycoprops(glcm, 'ASM')  # Текстурный признак Угловой второй момент
        self.Energy = greycoprops(glcm, 'energy')  # Текстурный признак Энергия
        self.Correlation = greycoprops(glcm, 'correlation')  # Текстурный признак Корреляция
    def plot_images(self,Distances,Contrast,Dissimilarity,Homogeneity,Asm,Energy,Correlation):
        fig = plt.figure()  # Для отображения графиков
        fig.subplots_adjust(hspace=0.4, wspace=0.4)  # Суб-график

        plt.subplot(2, 3, 1)
        plt.grid(axis='both')
        plt.title("Контраст")
        plt.xticks([i for i in range(0, max(Distances + 1))])
        plt.plot(Distances, Contrast, marker='o')

        plt.subplot(2, 3, 2)
        plt.grid(axis='both')
        plt.title("Несходство")
        plt.xticks([i for i in range(0, max(Distances + 1))])
        plt.plot(Distances, Dissimilarity, marker='o')

        plt.subplot(2, 3, 3)
        plt.grid(axis='both')
        plt.title("Локальная однородность")
        plt.xticks([i for i in range(0, max(Distances + 1))])
        plt.plot(Distances, Homogeneity, marker='o')

        plt.subplot(2, 3, 4)
        plt.grid(axis='both')
        plt.title("Угловой второй момент")
        plt.xticks([i for i in range(0, max(Distances + 1))])
        plt.plot(Distances, Asm, marker='o')

        plt.subplot(2, 3, 5)
        plt.grid()
        plt.title("Энергия")
        plt.xticks([i for i in range(0, max(Distances + 1))])
        plt.plot(Distances, Energy, marker='o')

        plt.subplot(2, 3, 6)
        plt.grid(axis='both')
        plt.title("Корреляция")
        plt.xticks([i for i in range(0, max(Distances + 1))])
        plt.plot(Distances, Correlation, marker='o')

        plt.show()
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
